snail_size = int(input("크기를 입력하세요 :"))

snail_array = [[0] * snail_size for i in range(snail_size)]

n = 0
s = 1
i = 0
j = -1

def snail_matrix(snail_size, n, s, i, j):
    for p in range(snail_size) :
        n = n+1
        j = j+s
        snail_array[i][j] = n

    snail_size -= 1

    for p in range(snail_size) :
        n = n+1
        i = i+s
        snail_array[i][j] = n

    s = s * (-1)

    if n == snail_size ** 2:
        for i in range(len(snail_array)):
            print(snail_array[i])
    else:
        return snail_matrix(snail_size, n, s, i, j)

snail_matrix(snail_size, n, s, i, j)

# 코드 설명
# n은 숫자가 차례대로 저장될 변수, s는 행과 열의 가감을 위한 변수
# i는 행을 계산할 때, j는 열을 계산할 때 쓰임
# snail_matrix 재귀함수 선언에서 for문을 통해 입력받은 수 만큼 실행,
# 첫 번째 for문에서는 열을, 두 번째 for문에서는 행을 처리
# 첫 번째 for문
# 수가 차례대로 저장이 되는 n은 초기값 0부터 1씩 증가 
# 첫 번째 돌아갈 때 0번째 행부터 채워지기 때문에 j = 0고정
# Line 16에서 snail_size -= 1이 있는 이유는, 저장되는 수의 갯수가 하나씩 줄어야 하기 때문
# 두 번째 for문
# 0번의 행이 채워졌기 때문에, 입력받은 수 (snail_size-1)번째 자리에서 열을 고정하고 행을 계산
# 열을 계산할 때 쓰이는 i는 고정, 행을 계산할 때 쓰이는 j만 1씩 증가
# Line 23에서 s = s * (-1)을 하는 이유는 그 다음 작동 때 반대 방향으로 수의 증가가 이루어져야 하기 때문
# Line 25에서 if n == snail_size ** 2 -> 배열의 크기는 입력받은 수의 제곱
# if문을 통해 마지막으로 저장된 수 n이 입력받은 snail_size의 제곱이 되면 출력
# 그렇지 않다면 다시 함수의 처음으로 돌아가 계속해서 수를 n에 입력, 저장
